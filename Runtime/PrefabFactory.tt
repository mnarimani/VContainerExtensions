<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using UnityEngine;
using VContainer.Unity;
using System.Collections.Generic;

namespace VContainer
{
<#
    for (int paramCount = 0; paramCount <= 10; paramCount++)
    {
        var range = Enumerable.Range(0, paramCount);
        var tParams = string.Join(", ", range.Select(x => "TParam" + (x + 1)));
        if (!string.IsNullOrEmpty(tParams))
            tParams += ",";
        var namedParams = string.Join(", ", range.Select(x => "TParam" + (x + 1) + " param" + (x + 1)));
        var separator = paramCount > 0 ? ", " : "";

        var names = string.Join(", ", range.Select(x => "param" + (x + 1)));
        var poolable = paramCount > 0 ? $"IPoolable<{tParams.Substring(0, tParams.Length - 1)}>" : "IPoolable";
#>
    public abstract class PrefabFactory<<#= tParams #> TOut> : PrefabFactoryBase<TOut> where TOut : class
    {
        public virtual TOut Create(<#= namedParams + separator #>Vector3 position = default, Quaternion rotation = default, Transform parent = default)
        {
<#
        if (paramCount > 0)
        {
#>
            IDisposable extraInstallerHandle = RegisterParameters(<#= names #>);
            try
            {
<#
        }
#>
                (LifetimeScope scope, TOut output) = Spawn(position, rotation, parent, out var despawn);
                CallPoolSpawnMethod(scope, output, despawn<#= separator + names #>);
                return output;
<#
        if (paramCount > 0)
        {
#>
            }
            finally
            {
                extraInstallerHandle?.Dispose();
            }
<#
        }
#>
        }

        public virtual TOut Create(<#= namedParams + separator #>Transform parent, bool keepWorldPosition)
        {
<#
        if (paramCount > 0)
        {
#>
            IDisposable extraInstallerHandle = RegisterParameters(<#= names #>);
            try
            {
<#
        }
#>
                (LifetimeScope scope, TOut output) = Spawn(parent, keepWorldPosition, out var despawn);
                CallPoolSpawnMethod(scope, output, despawn<#= separator + names #>);
                return output;
<#
        if (paramCount > 0)
        {
#>
            }
            finally
            {
                extraInstallerHandle?.Dispose();
            }
<#
        }
#>
        }

        private void CallPoolSpawnMethod(LifetimeScope spawnedScope, TOut output, Action despawn<#= separator + namedParams #>)
        {
            if (PoolSettings == null) return;

            // If the spawned prefab has a scope, we want to find every instance of object which implements IPoolable and call OnPoolSpawned on that. 
            if (spawnedScope != null)
            {
                // It is possible that the output was retrieved by GetComponent and was not registered in the container.
                // We need to make sure that IPoolable functions are called on the output 100% of the time.
                bool outputIsCalled = false;

                // This will resolve a list of all the objects which have been registered and have IPoolable implemented. 
                var poolables = spawnedScope.Container.Resolve<IReadOnlyCollection<<#= poolable #>>>();
                foreach (var p in poolables)
                {
                    try
                    {
                        p.OnPoolSpawn(despawn<#= separator + names #>);
                    }
                    catch (Exception e)
                    {
                        Debug.LogException(e);
                    }

                    if (p.Equals(output))
                    {
                        outputIsCalled = true;
                    }
                }

                if (outputIsCalled)
                    return;
            }

            if (output is <#= poolable #> outputPoolable)
            {
                try
                {
                    outputPoolable.OnPoolSpawn(despawn<#= separator + names #>);
                }
                catch (Exception e)
                {
                    Debug.LogException(e);
                }
            }
        }

<#
        if (paramCount > 0)
        {
#>

        private IDisposable RegisterParameters(<#= namedParams #>)
        {
            // We don't want to include extra parameters when object is pooled because these parameters will be passed using IPoolable functions.
            if (PoolSettings == null)
            {
<#
            for (int i = 0; i < paramCount; i++)
            {
#>
                Installer.Instance.Param<#= i + 1 #> = param<#= i + 1 #>;
<#
            }
#>
                return LifetimeScope.Enqueue(Installer.Instance);
            }

            return null;
        }

        private class Installer : IInstaller
        {
            public static readonly Installer Instance = new Installer();
<#
            for (int i = 0; i < paramCount; i++)
            {
#>
            public TParam<#= i + 1 #> Param<#= i + 1 #>;
<#
            }
#>

            private Installer()
            {
            }

            public void Install(IContainerBuilder builder)
            {
<#
            for (int i = 0; i < paramCount; i++)
            {
#>
                builder.RegisterInstance(Param<#= i + 1 #>).AsImplementedInterfaces().AsSelf();
<#
            }
#>
            }
        }
<#
        }
#>
    }
<#
    }
#>
}